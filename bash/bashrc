#!/bin/bash

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Resolve dotfiles singleton location
# Note: Don't use ~
# https://stackoverflow.com/questions/8409024/desktop-test-txt-no-such-file-or-directory
DOTFILES="$HOME/dotfiles"

# Load functions
. "$DOTFILES/bash/_functions.sh"

# --- Load machine specific configuration
# Load machine-specific configuration
# Note that we need to use $HOME instead of ~
COMPUTER_UID=$(_get_computer_id)

# Define the location of localized bash configs
LOCAL_BASHRC_FILE="$DOTFILES/bash/configs/${COMPUTER_UID}"

# --- Configure bash
shopt -s cdspell  # Correct directory names typo in cd commands
shopt -s nocaseglob  # Correct case errors in commands

# --- Expose dotfiles binaries
export PATH="${PATH}:~/dotfiles/bin"

# --- Python Developpement
export PYTHONDONTWRITEBYTECODE=1

# Aliases: Package Management
if _does_command_exist 'pacman'; then
  # Used by arch
  # echo "Installing aliases for: pacman"
  alias _install="sudo pacman -Sy"
  alias _uninstall="sudo pacman -R"
  alias _update="sudo pacman -Syu"
  alias _search="pacman -Ss"
  alias _aur_add="arch-ppa add"
  alias _aur_build="arch-ppa build custom"
elif _does_command_exist 'apt-get'; then
  # Used by debian/ubuntu
  # echo "Installing aliases for: apt-get"
  alias _install="sudo apt-get install -y"
  alias _uninstall="sudo apt-get remove"
  alias _sync="sudo apt-cache update"
  alias _search="sudo apt-cache search"
  alias _update="sudo apt-get update && sudo apt-get upgrade && sudo apt-get autoremove"
  alias _provide="dpkg -S"
  alias _installed="apt list --installed"
elif _does_command_exist 'yum'; then
  # Used by redhat/centos/fedora
  alias _install="sudo yum install -y"
  alias _uninstall="sudo yum remove -y"
  alias _sync="sudo update update -y"
  alias _search="yum search"
  function _provide() { yum provides "*/${1}"; }
  alias _installed="yum list installed"
fi

# Aliases: Snap Management
if _does_command_exist 'snap'; then
  alias _snap_install="sudo snap install"
  alias _snap_find="snap find"
  alias _snap_update="sudo snap refresh"
fi

# Aliases: Service Administration
if _does_command_exist 'systemctl'; then
  # systemd
  # echo "Installing aliases for: systemd"
  alias _start="sudo systemctl start"
  alias _stop="sudo systemctl stop"
  alias _status="sudo systemctl status"
  alias _restart="sudo systemctl restart"
  alias _reload="sudo systemctl daemon-reload"
  alias _enable="sudo systemctl enable"
  alias _disable="sudo systemctl disable"
  alias _journalof="sudo journalctl -u"
  alias _journal="sudo journalctl -b -f"
  alias _reboot="sudo systemctl reboot -i"
  alias _suspend="sudo systemctl suspend -i"
  alias _hybernate="sudo systemctl hibernate -i"
elif _does_command_exist 'service'; then
  # initv
  # echo "Installing aliases for initv"
  function _start() { service $1 start; }
  function _stop() { service $1 stop; }
  function _status() { service $1 status; }
  function _restart() { service $1 restart; }
  function _enable() { chkconfig $1 on; }
  function _disable() { chkconfig $1 off; }
fi

function _pdfunite() { pdfunite $1*.pdf "$1.pdf"; }

# Aliases: Wiki
if _does_command_exist 'wicd-curses'; then
  alias _wifi="wicd-curses"
elif _does_command_exist 'wifi-menu'; then
  alias _wifi="wifi-menu"
fi

# --- Configure TheFuck, see https://github.com/nvbn/thefuck
if _does_command_exist thefuck; then
  eval $(thefuck --alias)
fi

# --- Configure sane aliases
alias ls='ls --color=auto'
alias ll='ls -l'  # this is using our ll alias immediately
alias igrep='grep -i'
alias ...="../."
alias ....="../../."
alias .....="../../../."
alias ......="../../../../."
alias .......="../../../../../."

# --- Configure powerline
if _does_command_exist powerline-config; then
  # echo "Detected powerline installation"
  POWERLINE_INSTALL=$(python -c 'import os; import powerline; print(os.path.dirname(powerline.__file__))')
  # echo "Powerline location: ${POWERLINE_INSTALL}"
  POWERLINE_CONFIG=$(which powerline-config)
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  . "${POWERLINE_INSTALL}/bindings/bash/powerline.sh"
fi

# --- Configure python
export PYTHONDONTWRITEBYTECODE=1

# Load computer specific bashrc
#echo "Your machine ID is ${COMPUTER_UID}"
if [ -e "${LOCAL_BASHRC_FILE}" ]
  then
    #echo "Loading: ${LOCAL_BASHRC_FILE}"
    . "${LOCAL_BASHRC_FILE}"
  else
    BASHRC_LOCATION_FILENAME=(${!LOCAL_BASHRC_FILE@})
    echo "Found no local bash config for this computer."
    echo "You can create one by running:"
    echo "vi \$${BASHRC_LOCATION_FILENAME}"
fi

# Load z for browsing
source "${DOTFILES}/z/z.sh"
export EDITOR=micro
alias e="$EDITOR"
