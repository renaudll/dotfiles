#!/bin/bash

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# --- Private functions
function _get_computer_id {
  # Hash the computer mac address to determine a unique id.
  # Inspired from: https://unix.stackexchange.com/questions/144812/generate-consistent-machine-unique-id
  echo $(
    ip a |
    sed '\|^ *link[^ ]* |!d;s|||;s| .*||' |  # extract mac addresses
    sha256sum |  # hash the results
    awk '{print $1}'  # remove trailing dashe introduced by sha256sum
  )
}

function _does_command_exist {
  # Test for a given command. Return 1 if the command exist on the system, 0 otherwise.
  if type $1 > /dev/null 2>&1; then
    return 0  # 0 = true
  else
    return 1  # 1 = false
  fi
}

# --- Configure bash
shopt -s cdspell  # Correct directory names typo in cd commands
shopt -s nocaseglob  # Correct case errors in commands

# --- Expose dotfiles binaries
export PATH="${PATH}:~/dotfiles/bin"
if _does_command_exist 'pacman'; then
  export PATH="${PATH}:~/dotfiles/arch-ppa"
fi

# --- Python Developpement
export PYTHONDONTWRITEBYTECODE=1

# --- Setup aliases for package management
if _does_command_exist 'pacman'; then
  # Used by arch
  # echo "Installing aliases for: pacman"
  alias _install="sudo pacman -Sy"
  alias _uninstall="sudo pacman -R"
  alias _update="sudo pacman -Syu"
  alias _search="pacman -Ss"
  alias _aur_add="arch-ppa add"
  alias _aur_build="arch-ppa build custom"
elif _does_command_exist 'apt-get'; then
  # Used by debian/ubuntu
  echo "Installing aliases for: apt-get"
  alias _install="sudo apt-get install -y"
  alias _uninstall="sudo apt-get remove"
  alias _sync="sudo apt-cache update"
  alias _search="sudo apt-cache search"
  alias _update="sudo apt-get update && sudo apt-get upgrade && sudo apt-get autoremove"
  alias _provide="dpkg -S"
  alias _installed="apt list --installed"
fi

# --- Setup aliases for init systems
if _does_command_exist 'systemctl'; then
  # systemd
  # echo "Installing aliases for: systemd"
  alias _start="sudo systemctl start"
  alias _stop="sudo systemctl stop"
  alias _status="sudo systemctl status"
  alias _restart="sudo systemctl restart"
  alias _reload="sudo systemctl daemon-reload"
  alias _enable="sudo systemctl enable"
  alias _disable="sudo systemctl disable"
  alias _journalof="sudo journalctl -u"
  alias _journal="sudo journalctl -b -f"
  alias _reboot="sudo systemctl reboot -i"
elif _does_command_exist 'service'; then
  # initv
  # echo "Installing aliases for initv"
  _start() { service $1 start; }
  _stop() { service $1 stop; }
  _status() { service $1 status; }
  _restart() { service $1 restart; }
  _enable() { chkconfig $1 on; }
  _disable() { chkconfig $1 off; }
fi

# --- Configure TheFuck, see https://github.com/nvbn/thefuck
eval $(thefuck --alias)

# PS1='[\u@\h \W]\$ '

# --- Configure sane aliases
alias ls='ls --color=auto'
alias ll='ls -l'  # this is using our ll alias immediately
alias igrep='grep -i'
alias ...="../."
alias ....="../../."
alias .....="../../../."
alias ......="../../../../."
alias .......="../../../../../."

# --- Extract script, see https://gist.github.com/Jaxmetalmax/f0ec6d2f86474d8d319b
extract () {
if [ -f $1 ] ; then
  case $1 in
    *.tar.bz2) tar xjf $1 ;;
    *.tar.gz) tar xzf $1 ;;
    *.bz2) bunzip2 $1 ;;
    *.rar) rar x $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xf $1 ;;
    *.tbz2) tar xjf $1 ;;
    *.tgz) tar xzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *) echo "'$1' cannot be extracted via extract()" ;;
  esac
else
  echo "'$1' is not a valid file"
fi
}

# --- Configure powerline
if _does_command_exist powerline-config; then
  # echo "Detected powerline installation"
  POWERLINE_INSTALL=$(python -c 'import os; import powerline; print(os.path.dirname(powerline.__file__))')
  # echo "Powerline location: ${POWERLINE_INSTALL}"
  POWERLINE_CONFIG=$(which powerline-config)
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  . "${POWERLINE_INSTALL}/bindings/bash/powerline.sh"
  #. ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh
fi

# --- Load machine specific configuration
# Load machine-specific configuration
# Note that we need to use $HOME instead of ~
# see: https://stackoverflow.com/questions/8409024/desktop-test-txt-no-such-file-or-directory
COMPUTER_UID=$(_get_computer_id)
LOCAL_BASHRC_LOCATION="$HOME/dotfiles/bash/bashrc_${COMPUTER_UID}.sh"
if [ -e "${LOCAL_BASHRC_LOCATION}" ]; then
  # echo "Found machine-specific configuration, loading..."
  . "${LOCAL_BASHRC_LOCATION}"
fi

alias _maya="LD_LIBRARY_PATH=/usr/autodesk/maya2017/lib:$LD_LIBRARY_PATH /usr/autodesk/maya2017/bin/maya.bin"
alias _ping="ping 8.8.8.8"
alias _build_slides="(cd ~/dev/html/bart_scripting_course; ./build_slides.sh)"

